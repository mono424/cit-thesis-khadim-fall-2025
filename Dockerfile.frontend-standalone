# Multi-stage build for frontend-standalone
FROM node:20-alpine AS base

# Install pnpm
RUN npm install -g pnpm

# Set working directory
WORKDIR /app

# Copy workspace files (from repo root)
COPY packages/shared /app/packages/shared
COPY package.json /app/package.json
COPY pnpm-workspace.yaml /app/pnpm-workspace.yaml
COPY pnpm-lock.yaml /app/pnpm-lock.yaml

# Copy frontend-standalone app files
COPY apps/frontend-standalone /app/apps/frontend-standalone/

# Install dependencies
WORKDIR /app
RUN pnpm install --frozen-lockfile

# Build shared package
WORKDIR /app/packages/shared
RUN pnpm build

# Build frontend-standalone app
WORKDIR /app/apps/frontend-standalone
RUN pnpm build

# Production stage
FROM nginx:alpine AS production

# Install certbot and dependencies
RUN apk add --no-cache certbot certbot-nginx certbot-dns-cloudflare

# Copy built files to nginx
COPY --from=base /app/apps/frontend-standalone/dist /usr/share/nginx/html

# Copy custom nginx configuration
COPY apps/frontend-standalone/nginx.conf /etc/nginx/nginx.conf

# Copy SSL configuration template
COPY apps/frontend-standalone/ssl.conf /etc/nginx/ssl.conf.template

# Copy startup script
COPY apps/frontend-standalone/start.sh /usr/local/bin/start.sh
RUN chmod +x /usr/local/bin/start.sh

# Copy certbot renewal script
COPY apps/frontend-standalone/certbot-renew.sh /usr/local/bin/certbot-renew.sh
RUN chmod +x /usr/local/bin/certbot-renew.sh

# Create directory for certbot certificates
RUN mkdir -p /etc/letsencrypt/live

EXPOSE 80 443

# Start nginx with conditional SSL
CMD ["/usr/local/bin/start.sh"]
